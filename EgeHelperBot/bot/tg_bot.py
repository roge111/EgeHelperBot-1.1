from pathlib import Path
import sys

ROOT = Path(__file__).parent.parent  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞ 2 —É—Ä–æ–≤–Ω—è –≥–ª—É–±–∂–µ (–ø–∞–ø–∫–∞/–ø–æ–¥–ø–∞–ø–∫–∞/—Ñ–∞–π–ª)
# ROOT = Path(__file__).parent  # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –≤ sys.path (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç)
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))


import asyncio
import logging
import json
import re
import os



from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime
from dotenv import load_dotenv
from pathlib import Path
from aiogram.types import FSInputFile


from managers.dataBase import DataBaseManager
from managers.ManagerGPT import ManagerYandexGPT
from admin.console import Admin





load_dotenv()

TG_BOT_TOKEN = os.getenv('TG_API_BOT')
ADMIN_ID = os.getenv('ADMIN_ID')









bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher()
db = DataBaseManager()
yaGPT = ManagerYandexGPT()

admin = Admin()

def check_id_exists_exists(user_id):
    query = f"SELECT EXISTS(SELECT 1 FROM users WHERE user_id = {user_id})"
    result = db.query_database(query)
    return result[0][0]

def parser_response_gpt(response) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    response = response.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ (–±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON)
    if response.count('{') != response.count('}'):
        raise ValueError("–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤ JSON")
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã, –Ω–µ —Ç—Ä–æ–≥–∞—è \\n
    fixed_response = re.sub(r'(?<!\\)\n', r'\\n', response)
    
    try:
        data = json.loads(fixed_response)
    except json.JSONDecodeError as e:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
        if "Extra data" in str(e):
            # –û–±—Ä–µ–∑–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
            last_brace = fixed_response.rfind('}')
            if last_brace != -1:
                fixed_response = fixed_response[:last_brace+1]
        
        try:
            data = json.loads(fixed_response)
        except json.JSONDecodeError as final_error:
            # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
            error_pos = final_error.pos
            raise ValueError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON. –û—à–∏–±–∫–∞: {final_error}\n"
                f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —É—á–∞—Å—Ç–æ–∫: {fixed_response[max(0, error_pos-50):error_pos+50]}"
            ) from None
    
    return data["result"]["alternatives"][0]["message"]["text"]

@dp.message(Command("start"))
async def start(message: types.Message):
    

    user_id = message.from_user.id
    user_name = message.from_user.username

    if check_id_exists_exists(user_id):
        await message.answer("üëã–ü—Ä–∏–≤–µ—Ç. –¢—ã —É–∂–µ –∑–∞—Ä–∞–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã - /help.")
        return
    else:
        date_now = datetime.now()
        date_now = date_now.strftime('%Y-%m-%d')
        print(user_id)
        db.query_database(f"insert into users (user_id, user_name_tg, data_register) values ({user_id}, '{user_name}', '{date_now}');", reg=True)
    

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠. –†–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –≤ –†–æ—Å—Å–∏–∏ –º–æ–¥–µ–ª–µ–π –ò–ò 'YandexGPT'." \

                "\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã ‚Äî /help." \

                "\n –ó–¥–µ—Å—å –∏–º–µ—é—Ç—Å—è –¥–≤–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /tarrif." \

                "\n –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ /support (–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)."

                "\n –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."

                "\n –¢–∞–∫–∂–µ –ø—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ò–ò –º–æ–∂–µ—Ç –æ—à–∏–±–∞—Ç—å—Å—è! –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ–≥–æ –æ—Ç–≤–µ—Ç—ã.")




@dp.message(Command('help'))
async def start(message: types.Message):
    await message.answer("üìÉ–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
    "\n/tarrif - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö"
    "\n/count_req - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–≤ –∏ —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ"
    "\n/ask_info - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ–º–æ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ (–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)"
    "\n/ask_all - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ–º–æ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ï–ì–≠ (–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)"
    "\n/support - –ø—Ä–µ–¥–µ–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö (–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã).")

@dp.message(Command('ask_info'))
async def ask_gpt(message: types.Message):
    mess = message.text
    request =mess.replace('/ask_info', '')
    user_id = message.from_user.id
    
    res = yaGPT.ask_yandex_gpt(request, user_id, tarrif_plan='info')
    result, system_message = res[0], res[1]

    response = parser_response_gpt(result)

    await message.answer(response)
    if system_message:
        await message.answer(system_message)

@dp.message(Command('ask_all'))
async def ask_gpt(message: types.Message):
    mess = message.text
    request =mess.replace('/ask_info', '')
    user_id = message.from_user.id
    
    res = yaGPT.ask_yandex_gpt(request, user_id, tarrif_plan='all')
    result, system_message = res[0], res[1]
    if len(result) == 0:
        await message.reply("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–∏—à–µ–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –æ—à–∏–±–∫—É /support. –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å —á—É—Ç—å –ø–æ–∑–∂–µ")
 
    response = parser_response_gpt(result)
    

    await message.reply(response)
    if system_message:
        await message.answer(system_message)

    
@dp.message(Command('tarrif'))

async def tarrif_info(message: types.Message):
    await message.answer("–ï—Å—Ç—å –¥–≤–∞ —Ç–∞—Ä–∏—Ñ–∞:" \
    "\n1) info - —ç—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç  –æ—Ç–≤–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ (200 —Ä—É–±/–º–µ—Å, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü: 1000)" \
    "\n2) all - –Ω–µ–π—Ä–æ—Å–µ—Ç—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ï–ì–≠ (350 —Ä—É–±/–º–µ—Å, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü: 2000)"
    "–õ–∏–º–∏—Ç—ã –∫–æ—Å–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /ask_info –∏–ª–∏ /ask_all. –ù–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è")

@dp.message(Command('admin'))
async def admin_manager(message: types.Message):
    
    
    if str(message.from_user.id) == ADMIN_ID:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É (—Ñ–æ—Ä–º–∞—Ç: "/admin user_id tariff count_month")
        parts = message.text.replace('/admin', '').strip().split()
        if len(parts) != 3:
            await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin user_id tariff count_month')
            return
            
        user_id_new, tariff, count_month = parts
        
        await message.answer('‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ int –∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
        try:
            result = admin.update_follow(
                user_id=user_id_new,
                tariff=tariff,
                count_month=count_month
            )
            
            await message.answer(result if result else '‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        except Exception as e:
            await message.answer(f'‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:  {e}.')
    else:
        await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

dp.message(Command('/user_id'))


@dp.message(Command('user_id'))
async def id_of_user(message: types.Message):
    if message.from_user.id == int(ADMIN_ID):
        user_name = message.text.split()[1]
        user_id =db.query_database(f"select user_id from users where user_name_tg = '{user_name}';")[0][0]
        await message.answer(f'id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} = {user_id}')
    else:
        await message.answer(f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

        

@dp.message(Command('count_req'))

async def count_requests(message: types.Message):
    user_id = message.from_user.id
    try:
        count_req = db.query_database(f"select count_requests from users where user_id = {user_id};")[0][0]
        tarrif_plan = db.query_database(f"select tarrif_plan from users where user_id = {user_id};")[0][0]
        limit = 1000
        if not(count_req) and count_req != 0:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support")
        if tarrif_plan == 'all':
            limit = 2000
        elif tarrif_plan == 'info':
            limit = 1000
        await message.answer(f"–£ —Ç–µ–±—è –∏–∑—Ä–∞—Å—Ö–æ–¥–∞–≤–∞–Ω–æ: {count_req} –∏–∑ {limit}. \n–û—Å—Ç–∞–ª–æ—Å—å: {limit - count_req}")
    except Exception as e:
        await message.answer(f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –æ—à–∏–±–∫—É –≤ /support")

@dp.message(Command('support'))
async def support_message(message: types.Message):
    await message.forward(ADMIN_ID)
    await message.answer('‚úÖ –°–æ–æ–±—â–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!')




async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
# res = '{"result":{"alternatives":[{"message":{"role":"assistant","text":"–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏, –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–Ω—ã, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.\n\n–í–æ—Ç –æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏:\n\n1. **–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏.** –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–º –¥–∞–Ω—ã –∏ —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏.\n2. **–ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.** –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–Ω–∞–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–∞—Ö —Å—á–∏—Å–ª–µ–Ω–∏—è, –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∏ —Ç. –¥.\n3. **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –±—É–º–∞–≥–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–∞–º –º–µ—Ç–æ–¥—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã.** –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏, –ø–æ—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –Ω—É–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.\n4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ.** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏ –∏ —á—Ç–æ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.\n5. **–ó–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.**\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–µ –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∑–∞–¥–∞—á, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å."},"status":"ALTERNATIVE_STATUS_FINAL"}],"usage":{"inputTextTokens":"33","completionTokens":"216","totalTokens":"249","completionTokensDetails":{"reasoningTokens":"0"}},"modelVersion":"09.02.2025"}}'

# print(parser_response_gpt(res))